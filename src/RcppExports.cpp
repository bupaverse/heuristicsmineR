// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// count_length_two_loops
DataFrame count_length_two_loops(CharacterVector cases, IntegerVector activities);
RcppExport SEXP _heuristicsmineR_count_length_two_loops(SEXP casesSEXP, SEXP activitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type cases(casesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type activities(activitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(count_length_two_loops(cases, activities));
    return rcpp_result_gen;
END_RCPP
}
// count_parallel_lifecycle
DataFrame count_parallel_lifecycle(CharacterVector cases, IntegerVector activities, IntegerVector lifecycle);
RcppExport SEXP _heuristicsmineR_count_parallel_lifecycle(SEXP casesSEXP, SEXP activitiesSEXP, SEXP lifecycleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type cases(casesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type activities(activitiesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lifecycle(lifecycleSEXP);
    rcpp_result_gen = Rcpp::wrap(count_parallel_lifecycle(cases, activities, lifecycle));
    return rcpp_result_gen;
END_RCPP
}
// count_precedence
DataFrame count_precedence(CharacterVector cases, IntegerVector activities, int lead);
RcppExport SEXP _heuristicsmineR_count_precedence(SEXP casesSEXP, SEXP activitiesSEXP, SEXP leadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type cases(casesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type activities(activitiesSEXP);
    Rcpp::traits::input_parameter< int >::type lead(leadSEXP);
    rcpp_result_gen = Rcpp::wrap(count_precedence(cases, activities, lead));
    return rcpp_result_gen;
END_RCPP
}
// count_precedence_lifecycle
DataFrame count_precedence_lifecycle(CharacterVector cases, IntegerVector activities, IntegerVector lifecycle);
RcppExport SEXP _heuristicsmineR_count_precedence_lifecycle(SEXP casesSEXP, SEXP activitiesSEXP, SEXP lifecycleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type cases(casesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type activities(activitiesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lifecycle(lifecycleSEXP);
    rcpp_result_gen = Rcpp::wrap(count_precedence_lifecycle(cases, activities, lifecycle));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_heuristicsmineR_count_length_two_loops", (DL_FUNC) &_heuristicsmineR_count_length_two_loops, 2},
    {"_heuristicsmineR_count_parallel_lifecycle", (DL_FUNC) &_heuristicsmineR_count_parallel_lifecycle, 3},
    {"_heuristicsmineR_count_precedence", (DL_FUNC) &_heuristicsmineR_count_precedence, 3},
    {"_heuristicsmineR_count_precedence_lifecycle", (DL_FUNC) &_heuristicsmineR_count_precedence_lifecycle, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_heuristicsmineR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
